{"version":3,"sources":["components/Gametile/GameTile.module.css","components/Legend/Legend.module.css","components/Gamestatus/Gamestatus.module.css","components/Header/Header.module.css","components/Gameboard/Gameboard.module.css","components/Game/Game.module.css","components/Header/Header.jsx","reducers/players.jsx","components/Gametile/GameTile.jsx","components/Gameboard/Gameboard.jsx","components/Gamestatus/Gamestatus.jsx","components/Legend/Legend.jsx","components/Game/Game.jsx","components/Body/Body.jsx","App.jsx","reportWebVitals.js","reducers/boards.jsx","index.jsx"],"names":["module","exports","Header","className","Styles","playerStates","gameStatusStates","defaultState","player1","player2","gameStatus","player1Score","player2Score","players","state","action","type","payload","player","won","tileStates","styleMap","GameTile","tileIndex","boardNum","boardSize","playerState","hidden","oppType","tileVal","useSelector","boards","dispatch","useDispatch","attackOpponent","store","getState","opp","availMoves","map","val","ind","filter","randIndex","Math","floor","random","length","board","index","checkVictory","handleClick","e","shipIndex","shipLength","shipArray","boardEmptyAtPos","shipDir","tileContent","isPlacing","setTimeout","handleMouseOver","handleMouseLeave","handleRotate","preventDefault","console","log","tile","onContextMenu","onMouseLeave","onMouseOver","onClick","id","style","width","height","dir","i","Gameboard","playerID","Array","from","keys","shallowEqual","size","useEffect","statusMessageMap","Gamestatus","curStatus","Legend","tileStyles","Game","Body","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","board1","fill","board2","board1ShipIndex","board2ShipIndex","board1Hidden","board2Hidden","row1","parseInt","row2","newBoard","reducer","combineReducers","createStore","undefined","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d106f2f9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tile\":\"GameTile_tile__2V0fi\",\"tile-hover\":\"GameTile_tile-hover__27pCl\",\"tile-occupied\":\"GameTile_tile-occupied__2L1Kz\",\"tile-hidden-free\":\"GameTile_tile-hidden-free__1YNW9\",\"tile-hit\":\"GameTile_tile-hit__3Blcv\",\"tile-revealed\":\"GameTile_tile-revealed__3HRYw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"legend-container\":\"Legend_legend-container__2wkJE\",\"legend-tile\":\"Legend_legend-tile__2IZZF\",\"legend-text\":\"Legend_legend-text__2G7dO\",\"legend-entry\":\"Legend_legend-entry__3pAhb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game-status\":\"Gamestatus_game-status__17qnU\",\"status-contaienr\":\"Gamestatus_status-contaienr__5kGFG\",\"reset-button\":\"Gamestatus_reset-button__Z03MH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title-text\":\"Header_title-text__AxQNR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board-container\":\"Gameboard_board-container__3_TPw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameboard-container\":\"Game_gameboard-container__NZmrM\"};","import React from \"react\";\r\nimport Styles from \"./Header.module.css\"\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <h1 className={Styles['title-text']}>Battleship</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","export const playerStates = {\r\n    PLACING: 0,\r\n    DONE_PLACING: 1,\r\n    ISATTACKING: 2,\r\n    ISDEFENDING: 3,\r\n    LOST: 4,\r\n    WON: 5\r\n}\r\nexport const gameStatusStates = {\r\n    PLACING_SHIPS: 0,\r\n    PLAYER1TURN: 1,\r\n    PLAYER2TURN: 2,\r\n    PLAYER1WON: 3,\r\n    PLAYER2WON: 4,\r\n}\r\nlet defaultState = {\r\n    player1: playerStates.PLACING,\r\n    player2: playerStates.PLACING,\r\n    gameStatus : gameStatusStates.PLACING_SHIPS,\r\n    player1Score: 0,\r\n    player2Score: 0,\r\n}\r\n\r\n\r\n\r\n\r\nlet players = (state = defaultState, action) => {\r\n    switch(action.type) {\r\n        case 'CHANGE_PLAYER_STATE':\r\n            return {\r\n                ...state,\r\n                [action.payload.player]: action.payload.state,\r\n            }\r\n        case 'START_GAME':\r\n            return {\r\n                ...state,\r\n                player1: playerStates.ISATTACKING,\r\n                player2: playerStates.ISDEFENDING,\r\n                gameStatus: gameStatusStates.PLAYER1TURN,\r\n            }\r\n        case 'SWAP_TURNS':\r\n            return {\r\n                ...state,\r\n                player1: state.player2,\r\n                player2: state.player1,\r\n                gameStatus: state.gameStatus === gameStatusStates.PLAYER1TURN ? gameStatusStates.PLAYER2TURN : gameStatusStates.PLAYER1TURN,\r\n            }\r\n        case 'RESET_GAME':\r\n            return {\r\n                ...state,\r\n                player1: defaultState.player1,\r\n                player2: defaultState.player2,\r\n                gameStatus: defaultState.gameStatus,\r\n            }\r\n        case 'GAME_OVER':\r\n            let won = action.payload.player === \"player1\" ? \"player2\" : \"player1\";\r\n            return {\r\n                ...state,\r\n                [won]: playerStates.WON,\r\n                [action.payload.player]: playerStates.LOST,\r\n                [won+'Score']: state[won+'Score'] + 1,\r\n                gameStatus: won === \"player1\" ? gameStatusStates.PLAYER1WON : gameStatusStates.PLAYER2WON,\r\n            }\r\n        case 'INC_PLAYER_SCORE':\r\n            return {\r\n                ...state,\r\n                [action.payload.player+'Score']: state[action.payload.player+'Score'] + 1,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default players;","import React from \"react\";\r\nimport Styles from \"./GameTile.module.css\"\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { boardEmptyAtPos, checkVictory } from \"../Gameboard/Gameboard\";\r\nimport { playerStates } from \"../../reducers/players\";\r\nimport { store } from \"../..\";\r\n\r\n\r\n\r\nexport const tileStates = {\r\n    hidden: \"0\",\r\n    revealed: \"R\",\r\n    occupied: \"B\",\r\n    hovered: \"H\",\r\n    hit: \"X\",\r\n}\r\n\r\nconst styleMap = {\r\n    [tileStates.occupied]: Styles['tile-occupied'],\r\n    [tileStates.hidden]: Styles['tile-hidden-free'],\r\n    [tileStates.hovered]: Styles['tile-hover'],\r\n    [tileStates.hit]: Styles['tile-hit'],\r\n    [tileStates.revealed]: Styles['tile-revealed'],\r\n}\r\n\r\nconst GameTile = ({tileIndex, boardNum, boardSize, player, playerState, hidden, type, oppType}) => {\r\n    const tileVal = useSelector((state) => state.boards[boardNum][tileIndex]);\r\n\r\n    const dispatch = useDispatch();\r\n    // console.log(typeof(tileVal));\r\n    // console.log(\"Rendering tile\" + tileIndex);\r\n\r\n\r\n\r\n    const attackOpponent = () => {\r\n        let state = store.getState();\r\n        let opp = boardNum === \"board1\" ? \"board2\" : \"board1\";\r\n        let oppBoard = state.boards[opp];\r\n        let availMoves = oppBoard.map((val,ind) => (val === tileStates.hidden || val === tileStates.occupied) ? ind : -1);\r\n        availMoves = availMoves.filter((val) => val !== -1);\r\n        let randIndex = Math.floor(Math.random() * availMoves.length);\r\n        dispatch({type: \"REVEAL_TILE\", payload: {board: opp, index: availMoves[randIndex]}});\r\n        state = store.getState();\r\n        if (checkVictory(state.boards[opp]))\r\n        {\r\n            let lostPlayer = player === \"player1\" ? \"player2\" : \"player1\";\r\n            dispatch({type:\"GAME_OVER\", payload: {player:lostPlayer}});\r\n            //dispatch({type:\"RESET_GAME\"});\r\n        }\r\n        else\r\n        {\r\n            dispatch({type:\"SWAP_TURNS\"});\r\n        }\r\n    }\r\n    const handleClick = (e)=> {\r\n        let state = store.getState();\r\n        switch (playerState) {\r\n            case playerStates.PLACING: {\r\n                let shipIndex = state.boards[boardNum+\"ShipIndex\"];\r\n                let shipLength = state.boards.shipArray[shipIndex].length\r\n                if (boardEmptyAtPos(tileIndex, state.boards.shipDir, shipLength, state.boards[boardNum]))\r\n                    dispatch({type: \"CHANGE_ADJ_TILES\", payload: {index: tileIndex, length: shipLength, tileContent:tileStates.occupied, board: boardNum, isPlacing: true}});\r\n                state = store.getState();\r\n                if (state.boards[boardNum+\"ShipIndex\"] >= state.boards.shipArray.length)\r\n                {\r\n                    dispatch({type:\"CHANGE_PLAYER_STATE\", payload: {player:player, state: playerStates.DONE_PLACING}})\r\n                    state = store.getState()\r\n                    if (state.players.player1 === state.players.player2 && state.players.player1 === playerStates.DONE_PLACING)\r\n                    {\r\n                        dispatch({type:\"START_GAME\"});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case playerStates.ISDEFENDING: {\r\n                if (tileVal === tileStates.revealed || tileVal === tileStates.hit || oppType === 'computer')\r\n                    return;\r\n\r\n                dispatch({type: \"REVEAL_TILE\", payload: {board: boardNum, index: tileIndex}});\r\n                let state = store.getState()\r\n                if (checkVictory(state.boards[boardNum]))\r\n                {\r\n                    dispatch({type:\"GAME_OVER\", payload: {player:player}});\r\n                    //dispatch({type:\"RESET_GAME\"});\r\n                }\r\n                else \r\n                {\r\n                    dispatch({type:\"SWAP_TURNS\"});\r\n                    if (type === \"computer\")\r\n                        setTimeout(attackOpponent, 50);\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    const handleMouseOver = () => {\r\n        let state = store.getState();\r\n        switch (playerState) {\r\n            case playerStates.PLACING:\r\n                let shipIndex = state.boards[boardNum+\"ShipIndex\"];\r\n                let shipLength = state.boards.shipArray[shipIndex].length\r\n                if (boardEmptyAtPos(tileIndex, state.boards.shipDir, shipLength, state.boards[boardNum]))\r\n                    dispatch({type: \"CHANGE_ADJ_TILES\", payload: {index: tileIndex, length: shipLength, tileContent: tileStates.hovered, board: boardNum, isPlacing: false}});\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    const handleMouseLeave = () => {\r\n        let state = store.getState();\r\n        switch (playerState) {\r\n            case playerStates.PLACING:\r\n                let shipIndex = state.boards[boardNum+\"ShipIndex\"];\r\n                let shipLength = state.boards.shipArray[shipIndex].length\r\n                if (boardEmptyAtPos(tileIndex, state.boards.shipDir, shipLength, state.boards[boardNum]))\r\n                    dispatch({type: \"CHANGE_ADJ_TILES\", payload: {index: tileIndex, length: shipLength, tileContent: tileStates.hidden, board: boardNum, isPlacing: false}});\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    const handleRotate = (e) => {\r\n        e.preventDefault();\r\n        handleMouseLeave();\r\n        console.log(\"Dispatching\")\r\n        dispatch({type: \"TOGGLE_DIR\"});\r\n        handleMouseOver();\r\n    }\r\n\r\n    if (hidden === true && tileVal !== tileStates.revealed && tileVal !== tileStates.hit)\r\n        return (\r\n            <div className={`${Styles.tile} ${styleMap[tileStates.hidden]}`} onContextMenu={handleRotate} onMouseLeave={handleMouseLeave} onMouseOver={handleMouseOver} onClick= {handleClick} id ={`${tileIndex}`} style={{width: `${100/boardSize}%`, height:`${100/boardSize}%`}}></div>\r\n        )\r\n\r\n    return (\r\n        <div className={`${Styles.tile} ${styleMap[tileVal]}`} onContextMenu={handleRotate} onMouseLeave={handleMouseLeave} onMouseOver={handleMouseOver} onClick= {handleClick} id ={`${tileIndex}`} style={{width: `${100/boardSize}%`, height:`${100/boardSize}%`}}></div>\r\n    )\r\n}\r\n\r\nexport default GameTile;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport Styles from \"./Gameboard.module.css\"\r\nimport { shallowEqual,  useSelector, useDispatch} from 'react-redux'\r\nimport GameTile from \"../Gametile/GameTile\";\r\nimport { playerStates } from \"../../reducers/players\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport const boardEmptyAtPos = (index, dir, length, board) => {\r\n    for (let i = index; i < index + (dir * length); i+=dir)\r\n    {\r\n        if (board[i] === \"B\")\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const checkVictory = (board) => {\r\n    return board.filter((val) => val === \"B\").length === 0;\r\n}\r\n\r\nconst Gameboard = ({playerID, boardNum, type, oppType}) => {\r\n    const dispatch = useDispatch();\r\n    const board = useSelector((state) => Array.from(state.boards[boardNum].keys()), shallowEqual);\r\n    const hidden = useSelector((state) => state.boards[boardNum+'Hidden']);\r\n    const playerState = useSelector((state) => state.players[playerID]);\r\n    const size = useSelector((state) => state.boards.boardSize);\r\n    console.log(\"Rendering\" + boardNum);\r\n\r\n\r\n    useEffect(() => \r\n    {\r\n        if (type === \"computer\" && playerState === playerStates.PLACING)\r\n        {\r\n            dispatch({type: \"PLACE_RANDOM\", payload: {board: boardNum, player: playerID}});\r\n            dispatch({type: \"TOGGLE_BOARD_VIS\", payload: {board: boardNum}});\r\n            dispatch({type: \"CHANGE_PLAYER_STATE\", payload: {player: playerID, state:playerStates.DONE_PLACING}});\r\n        }\r\n    },[playerState])\r\n\r\n    return (\r\n        <>\r\n            <div className={Styles['board-container']}>\r\n                {board.map( (index) => <GameTile oppType={oppType} type={type} hidden={hidden} player={playerID} playerState={playerState} boardSize={size} boardNum={boardNum} tileIndex={index} key={index}></GameTile>)}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Gameboard;","import { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { gameStatusStates } from \"../../reducers/players\";\r\nimport Styles from \"./Gamestatus.module.css\";\r\n\r\nconst statusMessageMap = {\r\n    [gameStatusStates.PLACING_SHIPS]: \"Please Place Your Ships\\nRight click to Rotate\",\r\n    [gameStatusStates.PLAYER1TURN]: \"Player 1 is Attacking\",\r\n    [gameStatusStates.PLAYER2TURN]: \"Player 2 is Attacking\",\r\n    [gameStatusStates.PLAYER1WON]: \"Player 1 Won\",\r\n    [gameStatusStates.PLAYER2WON]: \"Player 2 Won\",\r\n}\r\n\r\nconst Gamestatus = () => {\r\n    let curStatus = useSelector((state)=> state.players.gameStatus);\r\n    let dispatch = useDispatch();\r\n    const handleReset = () => {\r\n        dispatch({type:\"RESET_GAME\"});\r\n    }\r\n\r\n    return (\r\n        <div className={Styles['status-contaienr']}>\r\n            <span className={Styles['game-status']} >{statusMessageMap[curStatus]}</span>\r\n            {(curStatus === gameStatusStates.PLAYER1WON || curStatus === gameStatusStates.PLAYER2WON) && \r\n            <button className={Styles['reset-button']} onClick={handleReset}>New Game</button>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Gamestatus;","import React from \"react\";\r\nimport Gamestatus from \"../Gamestatus/Gamestatus\";\r\nimport tileStyles from \"../Gametile/GameTile.module.css\";\r\nimport Styles from \"./Legend.module.css\";\r\n\r\nconst Legend = () => {\r\n\r\n    return (\r\n        <div className={Styles['legend-container']}>\r\n            <div className={Styles['legend-entry']}>\r\n                <div className={`${Styles['legend-tile']} ${tileStyles.tile} ${tileStyles['tile-hidden-free']}`} id='legend'></div>\r\n                <span className={Styles['legend-text']}>Hidden Tile</span>\r\n            </div>  \r\n            <div className={Styles['legend-entry']}>\r\n                <div className={`${Styles['legend-tile']} ${tileStyles.tile} ${tileStyles['tile-revealed']}`} id='legend'></div>\r\n                <span className={Styles['legend-text']}>Miss</span>\r\n            </div>  \r\n            <div className={Styles['legend-entry']}>\r\n                <div className={`${Styles['legend-tile']} ${tileStyles.tile} ${tileStyles['tile-hit']}`} id='legend'></div>\r\n                <span className={Styles['legend-text']}>Hit</span>\r\n            </div>  \r\n            <Gamestatus></Gamestatus>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Legend;","import React from \"react\";\r\nimport Gameboard from \"../Gameboard/Gameboard\";\r\nimport Legend from \"../Legend/Legend\";\r\nimport Styles from \"./Game.module.css\"\r\n\r\nconst Game = () => {\r\n\r\n    return (\r\n        <div className={Styles['gameboard-container']}>\r\n            <Gameboard playerID=\"player1\" boardNum=\"board1\" oppType=\"computer\"></Gameboard>\r\n            <Legend></Legend>\r\n            <Gameboard playerID=\"player2\" oppType=\"player\" type=\"computer\" boardNum=\"board2\"></Gameboard>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;","import React from \"react\";\r\nimport Game from \"../Game/Game\";\r\n\r\n\r\nconst Body = () => {\r\n\r\n    return (\r\n        <Game></Game>\r\n    )\r\n}\r\n\r\nexport default Body;","import React from 'react';\nimport Header from './components/Header/Header';\nimport Body from './components/Body/Body';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Header></Header>\n      <Body></Body>\n    </>\n  );\n}\n\nexport default App;\n","\n\nconst reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { boardEmptyAtPos } from \"../components/Gameboard/Gameboard\";\r\nimport { tileStates } from \"../components/Gametile/GameTile\";\r\n\r\n\r\nlet defaultState= {\r\n    board1: Array(64).fill(tileStates.hidden),\r\n    board2: Array(64).fill(tileStates.hidden),\r\n    boardSize: 8,\r\n    shipDir: 8,\r\n    shipArray: [\r\n        {id: \"C\", length: 5},\r\n        {id: \"B\", length: 4},\r\n        {id: \"D\", length: 3},\r\n        {id: \"S\", length: 3},\r\n        {id: \"P\", length: 2},\r\n    ],\r\n    board1ShipIndex: 0,\r\n    board2ShipIndex: 0,\r\n    board1Hidden: false,\r\n    board2Hidden: false,\r\n}\r\n\r\n\r\n\r\n\r\nlet boards = (state = defaultState, action) => {\r\n    // console.log(action);\r\n    switch (action.type) {\r\n\r\n        case 'CHANGE_TILE': {\r\n            if (state[action.payload.board][action.payload.index] === action.payload.tileContent)\r\n                return state;\r\n            return {\r\n                ...state,\r\n                [action.payload.board]: state[action.payload.board].map(\r\n                    (tile, i) => i === action.payload.index ? action.payload.tileContent : tile\r\n                )\r\n            }\r\n        }\r\n        case 'CHANGE_SIZE': {\r\n            if (state.boardSize === action.payload.size)\r\n                return state;\r\n            return {\r\n                ...state,\r\n                board1: Array(action.payload.size * action.payload.size).fill(0),\r\n                board2: Array(action.payload.size * action.payload.size).fill(0),\r\n                boardSize: action.payload.size,\r\n            }\r\n        }\r\n        case 'CHANGE_ADJ_TILES': {\r\n\r\n            // boundary checking\r\n            let dir = state.shipDir;\r\n            let row1 = parseInt((action.payload.index) / state.boardSize);\r\n            let row2 = parseInt(((action.payload.index) + (dir * (action.payload.length - 1) )) / state.boardSize);\r\n\r\n            if (action.payload.index + (dir * (action.payload.length -1)) >= state[action.payload.board].length)\r\n                return state;\r\n            else if (dir === 1 && row1 !== row2)\r\n                return state;\r\n\r\n\r\n            let newBoard = [...state[action.payload.board]];\r\n            for (let i = action.payload.index; i < action.payload.index + (dir * action.payload.length); i+=dir)\r\n            {\r\n                newBoard[i] = action.payload.tileContent;\r\n            }\r\n\r\n            if (action.payload.isPlacing)\r\n            {\r\n                return {\r\n                    ...state,\r\n                    [action.payload.board]: newBoard,\r\n                    [action.payload.board+'ShipIndex']: state[action.payload.board+'ShipIndex'] + 1\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                [action.payload.board]: newBoard\r\n            }\r\n        }\r\n        case 'TOGGLE_DIR': {\r\n            return {\r\n                ...state,\r\n                shipDir: state.shipDir === 1 ? state.boardSize : 1,\r\n            }\r\n        }\r\n\r\n        case 'REVEAL_TILE': {\r\n            return {\r\n                ...state,\r\n                [action.payload.board]: state[action.payload.board].map(\r\n                    (tile, i) => i === action.payload.index ? tile === tileStates.occupied ? tileStates.hit : tileStates.revealed : tile\r\n                )\r\n            }\r\n        }\r\n\r\n        case 'TOGGLE_BOARD_VIS': {\r\n            return {\r\n                ...state,\r\n                [action.payload.board+'Hidden']: state[action.payload.board+'Hidden'] === true ? false : true,\r\n            }\r\n        }\r\n        case 'PLACE_RANDOM': {\r\n            let newBoard = [...state[action.payload.board]];\r\n            let shipIndex = state[action.payload.board+'ShipIndex'];\r\n            while (shipIndex < state.shipArray.length) {\r\n                let shipLength = state.shipArray[shipIndex].length;\r\n                let tileIndex = Math.floor(Math.random() * state.boardSize * state.boardSize);\r\n                let dir = Math.floor(Math.random() * 2);\r\n                dir = dir === 1 ? state.boardSize : 1;\r\n                if (boardEmptyAtPos(tileIndex, dir, shipLength, newBoard))\r\n                {\r\n                    let row1 = parseInt((tileIndex) / state.boardSize);\r\n                    let row2 = parseInt(((tileIndex) + (dir * (shipLength - 1) )) / state.boardSize);\r\n        \r\n                    if (tileIndex + (dir * (shipLength -1)) >= state[action.payload.board].length)\r\n                        continue;\r\n                    else if (dir === 1 && row1 !== row2)\r\n                        continue;\r\n\r\n                    for (let i =tileIndex; i < tileIndex + (dir * shipLength); i+=dir)\r\n                    {\r\n                        newBoard[i] = tileStates.occupied;\r\n                    }\r\n                    shipIndex++;\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                [action.payload.board]: newBoard,\r\n            }\r\n        }\r\n        case \"RESET_GAME\":\r\n            {\r\n                return defaultState;\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport default boards;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport { combineReducers, createStore } from 'redux';\nimport boards from './reducers/boards';\nimport players from './reducers/players';\nconst reducer = combineReducers({boards, players})\nexport const store = createStore(reducer, undefined, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconsole.log(store.getState());\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}