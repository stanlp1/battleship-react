{"version":3,"sources":["components/Gametile/GameTile.module.css","components/Legend/Legend.module.css","components/RoomSelect/RoomSelect.module.css","components/ModeSelect/ModeSelect.module.css","components/Gamestatus/Gamestatus.module.css","components/Header/Header.module.css","components/Gameboard/Gameboard.module.css","components/Game/Game.module.css","components/Header/Header.jsx","reducers/players.jsx","reducers/game.jsx","components/Gametile/GameTile.jsx","components/Gametile/ComputerTile.jsx","components/Gameboard/Gameboard.jsx","components/Gamestatus/Gamestatus.jsx","components/Legend/Legend.jsx","components/Game/Game.jsx","components/RoomSelect/RoomSelect.jsx","components/ModeSelect/ModeSelect.jsx","components/Body/Body.jsx","App.jsx","reportWebVitals.js","reducers/boards.jsx","index.jsx"],"names":["module","exports","Header","className","Styles","playerStates","gameStatusStates","PLACING_SHIPS","PLAYER1TURN","PLAYER2TURN","PLAYER1WON","PLAYER2WON","defaultState","player1","player2","gameStatus","player1Score","player2Score","playerNum","players","state","action","type","payload","player","toString","won","gameStates","modes","mode","game","curstate","tileStates","styleMap","GameTile","socket","tileIndex","boardNum","boardSize","playerState","hidden","oppType","tileVal","useSelector","boards","dispatch","useDispatch","handleClick","e","store","getState","shipIndex","shipLength","shipArray","length","boardEmptyAtPos","shipDir","dir","index","tileContent","board","isPlacing","current","send","JSON","stringify","checkVictory","handleMouseOver","handleMouseLeave","handleRotate","preventDefault","console","log","tile","onContextMenu","onMouseLeave","onMouseOver","onClick","id","style","width","height","ComputerTile","attackOpponent","opp","availMoves","map","val","ind","filter","randIndex","Math","floor","random","setTimeout","i","Gameboard","playerID","Array","from","keys","shallowEqual","size","useEffect","statusMessageMap","Gamestatus","curStatus","gameMode","Legend","tileStyles","Game","RoomSelect","useState","roomName","setRoomName","onChange","target","value","ModeSelect","handleButtonInput","Body","gameState","useRef","WebSocket","onmessage","event","data","parse","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","board1","fill","board2","board1ShipIndex","board2ShipIndex","board1Hidden","board2Hidden","row1","parseInt","row2","newBoard","reducer","combineReducers","createStore","undefined","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1647b344.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tile\":\"GameTile_tile__2V0fi\",\"tile-hover\":\"GameTile_tile-hover__27pCl\",\"tile-occupied\":\"GameTile_tile-occupied__2L1Kz\",\"tile-hidden-free\":\"GameTile_tile-hidden-free__1YNW9\",\"tile-hit\":\"GameTile_tile-hit__3Blcv\",\"tile-revealed\":\"GameTile_tile-revealed__3HRYw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"legend-container\":\"Legend_legend-container__2wkJE\",\"legend-tile\":\"Legend_legend-tile__2IZZF\",\"legend-text\":\"Legend_legend-text__2G7dO\",\"legend-entry\":\"Legend_legend-entry__3pAhb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title-text\":\"RoomSelect_title-text__IneKs\",\"room-input\":\"RoomSelect_room-input__1E5Ul\",\"room-button\":\"RoomSelect_room-button__3IM25\",\"input-container\":\"RoomSelect_input-container__2ToCr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mode-container\":\"ModeSelect_mode-container__2Ys0M\",\"mode-button\":\"ModeSelect_mode-button__2-A9X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game-status\":\"Gamestatus_game-status__17qnU\",\"status-contaienr\":\"Gamestatus_status-contaienr__5kGFG\",\"reset-button\":\"Gamestatus_reset-button__Z03MH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title-text\":\"Header_title-text__AxQNR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board-container\":\"Gameboard_board-container__3_TPw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameboard-container\":\"Game_gameboard-container__NZmrM\"};","import React from \"react\";\r\nimport Styles from \"./Header.module.css\"\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <h1 className={Styles['title-text']}>Battleship</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","export const playerStates = {\r\n    PLACING: 0,\r\n    DONE_PLACING: 1,\r\n    ISATTACKING: 2,\r\n    ISDEFENDING: 3,\r\n    LOST: 4,\r\n    WON: 5\r\n}\r\nexport const gameStatusStates = {\r\n    PLACING_SHIPS: 0,\r\n    PLAYER1TURN: 1,\r\n    PLAYER2TURN: 2,\r\n    PLAYER1WON: 3,\r\n    PLAYER2WON: 4,\r\n}\r\nlet defaultState = {\r\n    player1: playerStates.PLACING,\r\n    player2: playerStates.PLACING,\r\n    gameStatus : gameStatusStates.PLACING_SHIPS,\r\n    player1Score: 0,\r\n    player2Score: 0,\r\n    playerNum: 1,\r\n}\r\n\r\n\r\n\r\nlet players = (state = defaultState, action) => {\r\n    switch(action.type) {\r\n        case 'CHANGE_PLAYER_STATE':\r\n            return {\r\n                ...state,\r\n                [action.payload.player]: action.payload.state,\r\n            }\r\n        case 'SET_ONLINE_PLAYER_NUM':\r\n            return {\r\n                ...state,\r\n                playerNum: action.payload.player,\r\n            }\r\n        case 'START_GAME':\r\n            return {\r\n                ...state,\r\n                player1: state.playerNum === 1 ? playerStates.ISATTACKING : playerStates.ISDEFENDING,\r\n                player2: state.playerNum === 1 ? playerStates.ISDEFENDING : playerStates.ISATTACKING,\r\n                gameStatus: gameStatusStates[\"PLAYER\"+state.playerNum.toString()+\"TURN\"]\r\n            }\r\n        case 'SWAP_TURNS':\r\n            return {\r\n                ...state,\r\n                player1: state.player2,\r\n                player2: state.player1,\r\n                gameStatus: state.gameStatus === gameStatusStates.PLAYER1TURN ? gameStatusStates.PLAYER2TURN : gameStatusStates.PLAYER1TURN,\r\n            }\r\n        case 'RESET_GAME':\r\n            return {\r\n                ...state,\r\n                player1: defaultState.player1,\r\n                player2: defaultState.player2,\r\n                gameStatus: defaultState.gameStatus,\r\n            }\r\n        case 'GAME_OVER':\r\n            let won = action.payload.player === \"player1\" ? \"player2\" : \"player1\";\r\n            return {\r\n                ...state,\r\n                [won]: playerStates.WON,\r\n                [action.payload.player]: playerStates.LOST,\r\n                [won+'Score']: state[won+'Score'] + 1,\r\n                gameStatus: won === \"player1\" ? gameStatusStates.PLAYER1WON : gameStatusStates.PLAYER2WON,\r\n            }\r\n        case 'INC_PLAYER_SCORE':\r\n            return {\r\n                ...state,\r\n                [action.payload.player+'Score']: state[action.payload.player+'Score'] + 1,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default players;","\r\n\r\n\r\nexport const gameStates = {\r\n    MODE_SELECT: 0,\r\n    JOINING_ROOM: 1,\r\n    AWAITING_PLAYER: 2,\r\n    GAME_STARTED: 3,\r\n\r\n}\r\n\r\nexport const modes = {\r\n    ONLINE: \"online\",\r\n    LOCAL: \"player\",\r\n    COMPUTER: \"computer\"\r\n}\r\nlet defaultState = {\r\n    state: gameStates.MODE_SELECT,\r\n    mode: modes.ONLINE,\r\n}\r\n\r\nlet game = (curstate = defaultState, action) =>\r\n{\r\n    switch (action.type)\r\n    {\r\n        case \"MODE_SELECTED\":\r\n        {\r\n            return {\r\n                ...curstate,\r\n                state: action.payload.mode === modes.ONLINE ? gameStates.JOINING_ROOM : gameStates.GAME_STARTED,\r\n                mode: action.payload.mode,\r\n            }\r\n        }\r\n        case \"JOINED_ROOM\":\r\n        {\r\n            return {\r\n                ...curstate,\r\n                state: gameStates.AWAITING_PLAYER,\r\n            }\r\n        }\r\n        default:\r\n            return curstate;\r\n    }\r\n\r\n}\r\n\r\nexport default game;","import React from \"react\";\r\nimport Styles from \"./GameTile.module.css\"\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { boardEmptyAtPos, checkVictory } from \"../Gameboard/Gameboard\";\r\nimport { playerStates } from \"../../reducers/players\";\r\nimport { store } from \"../..\";\r\nimport { modes } from \"../../reducers/game\";\r\n\r\n\r\nexport const tileStates = {\r\n    hidden: \"0\",\r\n    revealed: \"R\",\r\n    occupied: \"B\",\r\n    hovered: \"H\",\r\n    hit: \"X\",\r\n}\r\n\r\nexport const styleMap = {\r\n    [tileStates.occupied]: Styles['tile-occupied'],\r\n    [tileStates.hidden]: Styles['tile-hidden-free'],\r\n    [tileStates.hovered]: Styles['tile-hover'],\r\n    [tileStates.hit]: Styles['tile-hit'],\r\n    [tileStates.revealed]: Styles['tile-revealed'],\r\n}\r\n\r\nconst GameTile = ({socket, tileIndex, boardNum, boardSize, player, playerState, hidden, type, oppType}) => {\r\n    const tileVal = useSelector((state) => state.boards[boardNum][tileIndex]);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClick = (e)=> {\r\n        let state = store.getState();\r\n        switch (playerState) {\r\n            case playerStates.PLACING: {\r\n                let shipIndex = state.boards[boardNum+\"ShipIndex\"];\r\n                let shipLength = state.boards.shipArray[shipIndex].length\r\n                if (boardEmptyAtPos(tileIndex, state.boards.shipDir, shipLength, state.boards[boardNum]))\r\n                {\r\n                    dispatch({type: \"CHANGE_ADJ_TILES\", payload: {dir: state.boards.shipDir, index: tileIndex, length: shipLength, tileContent:tileStates.occupied, board: boardNum, isPlacing: true}});\r\n                    if (oppType === modes.ONLINE)\r\n                    {\r\n                        socket.current.send(JSON.stringify({\r\n                            \"event\": 1,\r\n                            \"payload\": {\r\n                                \"ROOM_NAME\": \"test\",\r\n                                \"PLACED_SHIPS\": {\r\n                                    \"index\": tileIndex,\r\n                                    \"dir\": state.boards.shipDir,\r\n                                    \"length\": shipLength\r\n                                }\r\n                            }\r\n                        }));\r\n                    }\r\n                }\r\n                state = store.getState();\r\n                if (state.boards[boardNum+\"ShipIndex\"] >= state.boards.shipArray.length)\r\n                {\r\n                    dispatch({type:\"CHANGE_PLAYER_STATE\", payload: {player:player, state: playerStates.DONE_PLACING}})\r\n                    state = store.getState()\r\n                    if (state.players.player1 === state.players.player2 && state.players.player1 === playerStates.DONE_PLACING)\r\n                    {\r\n                        dispatch({type:\"START_GAME\"});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case playerStates.ISDEFENDING: {\r\n                if (tileVal === tileStates.revealed || tileVal === tileStates.hit || oppType !== modes.LOCAL)\r\n                    return;\r\n\r\n                dispatch({type: \"REVEAL_TILE\", payload: {board: boardNum, index: tileIndex}});\r\n                let state = store.getState()\r\n                if (checkVictory(state.boards[boardNum]))\r\n                {\r\n                    dispatch({type:\"GAME_OVER\", payload: {player:player}});\r\n                    dispatch({type: \"REVEAL_BOARD\", payload: {board: \"board2\"}}); // reveal board when win\r\n                }\r\n                else \r\n                {\r\n                    dispatch({type:\"SWAP_TURNS\"});\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    const handleMouseOver = () => {\r\n        let state = store.getState();\r\n        switch (playerState) {\r\n            case playerStates.PLACING:\r\n                let shipIndex = state.boards[boardNum+\"ShipIndex\"];\r\n                let shipLength = state.boards.shipArray[shipIndex].length\r\n                if (boardEmptyAtPos(tileIndex, state.boards.shipDir, shipLength, state.boards[boardNum]))\r\n                    dispatch({type: \"CHANGE_ADJ_TILES\", payload: {dir: state.boards.shipDir, index: tileIndex, length: shipLength, tileContent: tileStates.hovered, board: boardNum, isPlacing: false}});\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    const handleMouseLeave = () => {\r\n        let state = store.getState();\r\n        switch (playerState) {\r\n            case playerStates.PLACING:\r\n                let shipIndex = state.boards[boardNum+\"ShipIndex\"];\r\n                let shipLength = state.boards.shipArray[shipIndex].length\r\n                if (boardEmptyAtPos(tileIndex, state.boards.shipDir, shipLength, state.boards[boardNum]))\r\n                    dispatch({type: \"CHANGE_ADJ_TILES\", payload: {dir: state.boards.shipDir, index: tileIndex, length: shipLength, tileContent: tileStates.hidden, board: boardNum, isPlacing: false}});\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    const handleRotate = (e) => {\r\n        e.preventDefault();\r\n        handleMouseLeave();\r\n        console.log(\"Dispatching\")\r\n        dispatch({type: \"TOGGLE_DIR\"});\r\n        handleMouseOver();\r\n    }\r\n\r\n    if (hidden === true && tileVal !== tileStates.revealed && tileVal !== tileStates.hit)\r\n        return (\r\n            <div className={`${Styles.tile} ${styleMap[tileStates.hidden]}`} onContextMenu={handleRotate} onMouseLeave={handleMouseLeave} onMouseOver={handleMouseOver} onClick= {handleClick} id ={`${tileIndex}`} style={{width: `${100/boardSize}%`, height:`${100/boardSize}%`}}></div>\r\n        )\r\n\r\n    return (\r\n        <div className={`${Styles.tile} ${styleMap[tileVal]}`} onContextMenu={handleRotate} onMouseLeave={handleMouseLeave} onMouseOver={handleMouseOver} onClick= {handleClick} id ={`${tileIndex}`} style={{width: `${100/boardSize}%`, height:`${100/boardSize}%`}}></div>\r\n    )\r\n}\r\n\r\nexport default GameTile;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport Styles from \"./GameTile.module.css\";\r\nimport { styleMap, tileStates } from \"./GameTile.jsx\";\r\nimport { boardEmptyAtPos, checkVictory } from \"../Gameboard/Gameboard\";\r\nimport { playerStates } from \"../../reducers/players.jsx\";\r\nimport { store } from \"../..\";\r\nimport { modes } from \"../../reducers/game\";\r\n\r\nlet ComputerTile = ({socket, tileIndex, boardNum, boardSize, player, playerState, hidden, type, oppType}) => {\r\n    const tileVal = useSelector((state) => state.boards[boardNum][tileIndex]);\r\n    const dispatch = useDispatch();\r\n\r\n    const attackOpponent = () => {\r\n        let state = store.getState();\r\n        let opp = boardNum === \"board1\" ? \"board2\" : \"board1\";\r\n        let oppBoard = state.boards[opp];\r\n        let availMoves = oppBoard.map((val,ind) => (val === tileStates.hidden || val === tileStates.occupied) ? ind : -1);\r\n        availMoves = availMoves.filter((val) => val !== -1);\r\n        let randIndex = Math.floor(Math.random() * availMoves.length);\r\n        dispatch({type: \"REVEAL_TILE\", payload: {board: opp, index: availMoves[randIndex]}});\r\n        state = store.getState();\r\n        if (checkVictory(state.boards[opp]))\r\n        {\r\n            let lostPlayer = player === \"player1\" ? \"player2\" : \"player1\";\r\n            dispatch({type:\"GAME_OVER\", payload: {player:lostPlayer}});\r\n            dispatch({type: \"REVEAL_BOARD\", payload: {board: boardNum}}); // reveal board when win\r\n        }\r\n        else\r\n        {\r\n            dispatch({type:\"SWAP_TURNS\"});\r\n        }\r\n    }\r\n\r\n    const handleClick = (e)=> {\r\n        let state = store.getState();\r\n        switch (playerState) {\r\n            case playerStates.ISDEFENDING: {\r\n                if (tileVal === tileStates.revealed || tileVal === tileStates.hit)\r\n                    return;\r\n\r\n                dispatch({type: \"REVEAL_TILE\", payload: {board: boardNum, index: tileIndex}});\r\n                if (type === modes.ONLINE)\r\n                {\r\n                    socket.current.send(JSON.stringify(\r\n                        {\r\n                            \"event\": 2,\r\n                            \"payload\": {\r\n                                \"index\": tileIndex\r\n                            }\r\n                        }\r\n                    ));\r\n                }\r\n                let state = store.getState()\r\n                if (checkVictory(state.boards[boardNum]))\r\n                {\r\n                    dispatch({type:\"GAME_OVER\", payload: {player:player}});\r\n                    dispatch({type: \"REVEAL_BOARD\", payload: {board: boardNum}}); // reveal board when win\r\n                }\r\n                else \r\n                {\r\n                    dispatch({type:\"SWAP_TURNS\"});\r\n                    if (type === modes.COMPUTER)\r\n                        setTimeout(attackOpponent, 50);\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    if (hidden === true && tileVal !== tileStates.revealed && tileVal !== tileStates.hit)\r\n    return (\r\n        <div className={`${Styles.tile} ${styleMap[tileStates.hidden]}`} onClick={handleClick} id ={`${tileIndex}`} style={{width: `${100/boardSize}%`, height:`${100/boardSize}%`}}></div>\r\n    )\r\n\r\n\r\n    return (\r\n    <div className={`${Styles.tile} ${styleMap[tileVal]}`} onClick={handleClick} id ={`${tileIndex}`} style={{width: `${100/boardSize}%`, height:`${100/boardSize}%`}}></div>\r\n    )\r\n}\r\n\r\nexport default ComputerTile;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport Styles from \"./Gameboard.module.css\"\r\nimport { shallowEqual,  useSelector, useDispatch} from 'react-redux'\r\nimport GameTile from \"../Gametile/GameTile\";\r\nimport { playerStates } from \"../../reducers/players\";\r\nimport { useEffect } from \"react\";\r\nimport ComputerTile from \"../Gametile/ComputerTile\";\r\nimport {modes} from \"../../reducers/game\"\r\n\r\nexport const boardEmptyAtPos = (index, dir, length, board) => {\r\n    for (let i = index; i < index + (dir * length); i+=dir)\r\n    {\r\n        if (board[i] === \"B\")\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const checkVictory = (board) => {\r\n    return board.filter((val) => val === \"B\").length === 0;\r\n}\r\n\r\nconst Gameboard = ({socket, playerID, boardNum, type, oppType}) => {\r\n    const dispatch = useDispatch();\r\n    const board = useSelector((state) => Array.from(state.boards[boardNum].keys()), shallowEqual);\r\n    const hidden = useSelector((state) => state.boards[boardNum+'Hidden']);\r\n    const playerState = useSelector((state) => state.players[playerID]);\r\n    const size = useSelector((state) => state.boards.boardSize);\r\n    console.log(\"Rendering\" + boardNum);\r\n\r\n\r\n    useEffect(() => \r\n    {\r\n        if (type === modes.COMPUTER && playerState === playerStates.PLACING)\r\n        {\r\n            dispatch({type: \"PLACE_RANDOM\", payload: {board: boardNum, player: playerID}});\r\n            dispatch({type: \"CHANGE_PLAYER_STATE\", payload: {player: playerID, state:playerStates.DONE_PLACING}});\r\n        }\r\n        if (type !== modes.LOCAL && playerState === playerStates.PLACING)\r\n        {\r\n            dispatch({type: \"HIDE_BOARD\", payload: {board: boardNum}});\r\n        }\r\n    },[playerState])\r\n\r\n    let renderTiles = () => {\r\n        if (type === modes.COMPUTER || type === modes.ONLINE)\r\n        {\r\n            return board.map( (index) => <ComputerTile socket={socket} oppType={oppType} type={type} hidden={hidden} player={playerID} playerState={playerState} boardSize={size} boardNum={boardNum} tileIndex={index} key={index}></ComputerTile>);\r\n        }\r\n        else{\r\n            return board.map( (index) => <GameTile socket={socket} oppType={oppType} type={type} hidden={hidden} player={playerID} playerState={playerState} boardSize={size} boardNum={boardNum} tileIndex={index} key={index}></GameTile>);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={Styles['board-container']}>\r\n                {renderTiles()}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Gameboard;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { gameStatusStates } from \"../../reducers/players\";\r\nimport Styles from \"./Gamestatus.module.css\";\r\nimport { modes } from \"../../reducers/game\";\r\n\r\nconst statusMessageMap = {\r\n    [gameStatusStates.PLACING_SHIPS]: \"Please Place Your Ships\\nRight click to Rotate\",\r\n    [gameStatusStates.PLAYER1TURN]: \"You are Attacking\",\r\n    [gameStatusStates.PLAYER2TURN]: \"Your Opponent is Attacking\",\r\n    [gameStatusStates.PLAYER1WON]: \"You Won\",\r\n    [gameStatusStates.PLAYER2WON]: \"Your Opponent Won\",\r\n}\r\n\r\nconst Gamestatus = ({socket}) => {\r\n    let curStatus = useSelector((state)=> state.players.gameStatus);\r\n    let gameMode = useSelector((state)=>state.game.mode);\r\n    let dispatch = useDispatch();\r\n    const handleReset = () => {\r\n        dispatch({type:\"RESET_GAME\"});\r\n        if (gameMode === modes.ONLINE)\r\n        {\r\n            socket.current.send(JSON.stringify(\r\n                {\r\n                    \"event\": 4,\r\n                }\r\n            ));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={Styles['status-contaienr']}>\r\n            <span className={Styles['game-status']} >{statusMessageMap[curStatus]}</span>\r\n            {(curStatus === gameStatusStates.PLAYER1WON || curStatus === gameStatusStates.PLAYER2WON) && \r\n            <button className={Styles['reset-button']} onClick={handleReset}>New Game</button>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Gamestatus;","import React from \"react\";\r\nimport Gamestatus from \"../Gamestatus/Gamestatus\";\r\nimport tileStyles from \"../Gametile/GameTile.module.css\";\r\nimport Styles from \"./Legend.module.css\";\r\n\r\nconst Legend = ({socket}) => {\r\n\r\n    return (\r\n        <div className={Styles['legend-container']}>\r\n            <div className={Styles['legend-entry']}>\r\n                <div className={`${Styles['legend-tile']} ${tileStyles.tile} ${tileStyles['tile-hidden-free']}`} id='legend'></div>\r\n                <span className={Styles['legend-text']}>Hidden Tile</span>\r\n            </div>  \r\n            <div className={Styles['legend-entry']}>\r\n                <div className={`${Styles['legend-tile']} ${tileStyles.tile} ${tileStyles['tile-revealed']}`} id='legend'></div>\r\n                <span className={Styles['legend-text']}>Miss</span>\r\n            </div>  \r\n            <div className={Styles['legend-entry']}>\r\n                <div className={`${Styles['legend-tile']} ${tileStyles.tile} ${tileStyles['tile-hit']}`} id='legend'></div>\r\n                <span className={Styles['legend-text']}>Hit</span>\r\n            </div>  \r\n            <Gamestatus socket={socket}></Gamestatus>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Legend;","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Gameboard from \"../Gameboard/Gameboard\";\r\nimport Legend from \"../Legend/Legend\";\r\nimport Styles from \"./Game.module.css\"\r\nimport {modes } from \"../../reducers/game\";\r\n\r\nconst Game = ({socket}) => {\r\n\r\n    let mode = useSelector(state => state.game.mode);\r\n\r\n    \r\n    return (\r\n        <div className={Styles['gameboard-container']}>\r\n            <Gameboard socket={socket} playerID=\"player1\" boardNum=\"board1\" type={modes.LOCAL} oppType={mode}></Gameboard>\r\n            <Legend socket = {socket} ></Legend>\r\n            <Gameboard socket={socket} playerID=\"player2\" oppType={modes.LOCAL} type={mode} boardNum=\"board2\"></Gameboard>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;","import Styles from \"./RoomSelect.module.css\"\r\nimport {useState} from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nlet RoomSelect = ({socket}) => {\r\n\r\n    let [roomName, setRoomName] = useState(\"\");\r\n    let dispatch = useDispatch();\r\n    let handleInputChange = (e) => {\r\n        setRoomName(e.target.value);\r\n    }\r\n\r\n    console.log(socket);\r\n    let handleFormSubmit = () => {\r\n        socket.current.send(JSON.stringify(\r\n            {\r\n                \"event\": 0,\r\n                \"payload\": {\r\n                    \"ROOM_NAME\": roomName\r\n                }\r\n            }\r\n        ))\r\n        dispatch({type: \"JOINED_ROOM\"});\r\n    \r\n    }\r\n\r\n    return (\r\n        <div className={Styles['input-container']}>\r\n            <h1 className={Styles['title-text']}>Please Enter A Room Name</h1>\r\n            <input onChange={handleInputChange} value={roomName} className={Styles['room-input']} type='text'></input>\r\n            <button onClick={handleFormSubmit} className={Styles['room-button']}>Join Room</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RoomSelect;","import Styles from \"./ModeSelect.module.css\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport {modes } from \"../../reducers/game\";\r\n\r\n\r\nlet ModeSelect = () => {\r\n    let dispatch = useDispatch();\r\n\r\n    let handleButtonInput = (e) => {\r\n        dispatch({type: \"MODE_SELECTED\", payload: { mode: e.target.value}});\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className={Styles['mode-container']}>\r\n            <button onClick={handleButtonInput} value={modes.ONLINE}className={Styles['mode-button']}>Online</button>\r\n            <button onClick={handleButtonInput} value={modes.LOCAL} className={Styles['mode-button']}>Local</button>\r\n            <button onClick={handleButtonInput} value={modes.COMPUTER} className={Styles['mode-button']}>Computer</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModeSelect;","import React, { useEffect, useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Game from \"../Game/Game\";\r\nimport { gameStates } from \"../../reducers/game\";\r\nimport RoomSelect from \"../RoomSelect/RoomSelect\";\r\nimport ModeSelect from \"../ModeSelect/ModeSelect\";\r\nimport { playerStates } from \"../../reducers/players\";\r\nimport { tileStates } from \"../Gametile/GameTile\";\r\nimport { store } from \"../..\";\r\nimport { checkVictory } from \"../Gameboard/Gameboard\";\r\n\r\nconst Body = () => {\r\n    const gameState = useSelector(state=> state.game.state);\r\n    const socket = useRef(null);\r\n\r\n    useEffect(() => \r\n    {\r\n        if(gameState === gameStates.JOINING_ROOM) // open socket if game is online\r\n        {\r\n            socket.current = new WebSocket('wss://immense-caverns-86821.herokuapp.com');\r\n\r\n            socket.current.onmessage = (event) => {\r\n                let data \r\n                try {\r\n                    data = JSON.parse(event.data);\r\n                }\r\n                catch (e) {\r\n                    data = event.data;\r\n                }\r\n                \r\n                console.log(data);\r\n            \r\n                switch (data.event)\r\n                {\r\n                    case 'ROOM_JOIN_SUCCESS':\r\n                    {\r\n\r\n                        store.dispatch({type: \"SET_ONLINE_PLAYER_NUM\", payload: { player: data.payload.player }});\r\n                        console.log(\"SET ROOM\");\r\n                        break;\r\n                    }\r\n                    case 1: // oppponent ship place event\r\n                    {\r\n                        console.log(\"Reached\");\r\n                        store.dispatch({type: \"CHANGE_ADJ_TILES\", payload: {dir: data.dir, index: data.index, length: data.length, tileContent:tileStates.occupied, board: \"board2\", isPlacing: true}});\r\n                        let state = store.getState();\r\n                        if (state.boards['board2ShipIndex'] >= state.boards.shipArray.length)\r\n                        {\r\n                            store.dispatch({type:\"CHANGE_PLAYER_STATE\", payload: {player:'player2', state: playerStates.DONE_PLACING}})\r\n                            state = store.getState()\r\n                            if (state.players.player1 === state.players.player2 && state.players.player1 === playerStates.DONE_PLACING)\r\n                            {\r\n                                store.dispatch({type:\"START_GAME\"});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case 2: // oppoonent attack event\r\n                    {\r\n                        console.log(\"Received Attack\");\r\n                        store.dispatch({type: \"REVEAL_TILE\", payload: {board: \"board1\", index: data.index}});\r\n                        let state = store.getState()\r\n                        if (checkVictory(state.boards[\"board1\"]))\r\n                        {\r\n                            store.dispatch({type:\"GAME_OVER\", payload: {player:\"player1\"}});\r\n                            store.dispatch({type: \"REVEAL_BOARD\", payload: {board: \"board2\"}}); // reveal board when victory\r\n                        }\r\n                        else \r\n                        {\r\n                            store.dispatch({type:\"SWAP_TURNS\"});\r\n                        }\r\n                        break;\r\n                    }\r\n                    case 3: // new game event\r\n                    {\r\n                        console.log(\"Received New Game Event\");\r\n                        store.dispatch({type:\"RESET_GAME\"});\r\n                    }\r\n            \r\n                    default:\r\n                }\r\n            }\r\n        }\r\n    }, [gameState])\r\n\r\n    const stateMap = {\r\n        [gameStates.MODE_SELECT]: <ModeSelect></ModeSelect>,\r\n        [gameStates.JOINING_ROOM]: <RoomSelect socket={socket}></RoomSelect>,\r\n        [gameStates.AWAITING_PLAYER]: <Game socket={socket}></Game>,\r\n        [gameStates.GAME_STARTED]: <Game socket={socket}></Game>\r\n    }\r\n    return (\r\n        stateMap[gameState]\r\n    )\r\n}\r\n\r\nexport default Body;","import React from 'react';\nimport Header from './components/Header/Header';\nimport Body from './components/Body/Body';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Header></Header>\n      <Body></Body>\n    </>\n  );\n}\n\nexport default App;\n","\n\nconst reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { boardEmptyAtPos } from \"../components/Gameboard/Gameboard\";\r\nimport { tileStates } from \"../components/Gametile/GameTile\";\r\n\r\n\r\nlet defaultState= {\r\n    board1: Array(64).fill(tileStates.hidden),\r\n    board2: Array(64).fill(tileStates.hidden),\r\n    boardSize: 8,\r\n    shipDir: 8,\r\n    shipArray: [\r\n        {id: \"C\", length: 5},\r\n        {id: \"B\", length: 4},\r\n        {id: \"D\", length: 3},\r\n        {id: \"S\", length: 3},\r\n        {id: \"P\", length: 2},\r\n    ],\r\n    board1ShipIndex: 0,\r\n    board2ShipIndex: 0,\r\n    board1Hidden: false,\r\n    board2Hidden: false,\r\n}\r\n\r\n\r\n\r\n\r\nlet boards = (state = defaultState, action) => {\r\n    // console.log(action);\r\n    switch (action.type) {\r\n\r\n        case 'CHANGE_TILE': {\r\n            if (state[action.payload.board][action.payload.index] === action.payload.tileContent)\r\n                return state;\r\n            return {\r\n                ...state,\r\n                [action.payload.board]: state[action.payload.board].map(\r\n                    (tile, i) => i === action.payload.index ? action.payload.tileContent : tile\r\n                )\r\n            }\r\n        }\r\n        case 'CHANGE_SIZE': {\r\n            if (state.boardSize === action.payload.size)\r\n                return state;\r\n            return {\r\n                ...state,\r\n                board1: Array(action.payload.size * action.payload.size).fill(0),\r\n                board2: Array(action.payload.size * action.payload.size).fill(0),\r\n                boardSize: action.payload.size,\r\n            }\r\n        }\r\n        case 'CHANGE_ADJ_TILES': {\r\n\r\n            // boundary checking\r\n            let dir = action.payload.dir\r\n            let row1 = parseInt((action.payload.index) / state.boardSize);\r\n            let row2 = parseInt(((action.payload.index) + (dir * (action.payload.length - 1) )) / state.boardSize);\r\n\r\n            if (action.payload.index + (dir * (action.payload.length -1)) >= state[action.payload.board].length)\r\n                return state;\r\n            else if (dir === 1 && row1 !== row2)\r\n                return state;\r\n\r\n\r\n            let newBoard = [...state[action.payload.board]];\r\n            for (let i = action.payload.index; i < action.payload.index + (dir * action.payload.length); i+=dir)\r\n            {\r\n                newBoard[i] = action.payload.tileContent;\r\n            }\r\n\r\n            if (action.payload.isPlacing)\r\n            {\r\n                return {\r\n                    ...state,\r\n                    [action.payload.board]: newBoard,\r\n                    [action.payload.board+'ShipIndex']: state[action.payload.board+'ShipIndex'] + 1\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                [action.payload.board]: newBoard\r\n            }\r\n        }\r\n        case 'TOGGLE_DIR': {\r\n            return {\r\n                ...state,\r\n                shipDir: state.shipDir === 1 ? state.boardSize : 1,\r\n            }\r\n        }\r\n\r\n        case 'REVEAL_TILE': {\r\n            return {\r\n                ...state,\r\n                [action.payload.board]: state[action.payload.board].map(\r\n                    (tile, i) => i === action.payload.index ? tile === tileStates.occupied ? tileStates.hit : tileStates.revealed : tile\r\n                )\r\n            }\r\n        }\r\n\r\n        case 'TOGGLE_BOARD_VIS': {\r\n            return {\r\n                ...state,\r\n                [action.payload.board+'Hidden']: state[action.payload.board+'Hidden'] === true ? false : true,\r\n            }\r\n        }\r\n        case 'HIDE_BOARD': {\r\n            return {\r\n                ...state,\r\n                [action.payload.board+'Hidden']: true\r\n            }\r\n        }\r\n        case 'REVEAL_BOARD': {\r\n            return {\r\n                ...state,\r\n                [action.payload.board+'Hidden']: false\r\n            }\r\n        }\r\n        case 'PLACE_RANDOM': {\r\n            let newBoard = [...state[action.payload.board]];\r\n            let shipIndex = state[action.payload.board+'ShipIndex'];\r\n            while (shipIndex < state.shipArray.length) {\r\n                let shipLength = state.shipArray[shipIndex].length;\r\n                let tileIndex = Math.floor(Math.random() * state.boardSize * state.boardSize);\r\n                let dir = Math.floor(Math.random() * 2);\r\n                dir = dir === 1 ? state.boardSize : 1;\r\n                if (boardEmptyAtPos(tileIndex, dir, shipLength, newBoard))\r\n                {\r\n                    let row1 = parseInt((tileIndex) / state.boardSize);\r\n                    let row2 = parseInt(((tileIndex) + (dir * (shipLength - 1) )) / state.boardSize);\r\n        \r\n                    if (tileIndex + (dir * (shipLength -1)) >= state[action.payload.board].length)\r\n                        continue;\r\n                    else if (dir === 1 && row1 !== row2)\r\n                        continue;\r\n\r\n                    for (let i =tileIndex; i < tileIndex + (dir * shipLength); i+=dir)\r\n                    {\r\n                        newBoard[i] = tileStates.occupied;\r\n                    }\r\n                    shipIndex++;\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                [action.payload.board]: newBoard,\r\n            }\r\n        }\r\n        case \"RESET_GAME\":\r\n            {\r\n                return defaultState;\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport default boards;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport { combineReducers, createStore } from 'redux';\nimport boards from './reducers/boards';\nimport players from './reducers/players';\nimport game from './reducers/game';\nconst reducer = combineReducers({game, boards, players})\nexport const store = createStore(reducer, undefined, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconsole.log(store.getState());\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}